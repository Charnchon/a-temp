[{"/mnt/c/Users/Boat/workspace/artisan/m9/a-temp/react-app/src/index.js":"1","/mnt/c/Users/Boat/workspace/artisan/m9/a-temp/react-app/src/redux/store.js":"2","/mnt/c/Users/Boat/workspace/artisan/m9/a-temp/react-app/src/App.js":"3","/mnt/c/Users/Boat/workspace/artisan/m9/a-temp/react-app/src/redux/reducers/Temporature.js":"4","/mnt/c/Users/Boat/workspace/artisan/m9/a-temp/react-app/src/pages/Home.js":"5","/mnt/c/Users/Boat/workspace/artisan/m9/a-temp/react-app/src/components/Footer.js":"6","/mnt/c/Users/Boat/workspace/artisan/m9/a-temp/react-app/src/components/GlobalStyle.js":"7","/mnt/c/Users/Boat/workspace/artisan/m9/a-temp/react-app/src/pages/Charts.js":"8","/mnt/c/Users/Boat/workspace/artisan/m9/a-temp/react-app/src/components/Navbar/index.js":"9","/mnt/c/Users/Boat/workspace/artisan/m9/a-temp/react-app/src/redux/constants/Temporature.js":"10","/mnt/c/Users/Boat/workspace/artisan/m9/a-temp/react-app/src/redux/actions/Temporature.js":"11","/mnt/c/Users/Boat/workspace/artisan/m9/a-temp/react-app/src/services/Data.js":"12","/mnt/c/Users/Boat/workspace/artisan/m9/a-temp/react-app/src/components/Navbar/NavBarElements.js":"13","/mnt/c/Users/Boat/workspace/artisan/m9/a-temp/react-app/src/components/List/index.js":"14","/mnt/c/Users/Boat/workspace/artisan/m9/a-temp/react-app/src/components/Graph/index.js":"15","/mnt/c/Users/Boat/workspace/artisan/m9/a-temp/react-app/src/components/Ranking/index.js":"16","/mnt/c/Users/Boat/workspace/artisan/m9/a-temp/react-app/src/components/Graph/GraphElements.js":"17","/mnt/c/Users/Boat/workspace/artisan/m9/a-temp/react-app/src/components/Ranking/RankingElements.js":"18","/mnt/c/Users/Boat/workspace/artisan/m9/a-temp/react-app/src/components/List/ListElements.js":"19","/mnt/c/Users/Boat/workspace/artisan/m9/a-temp/react-app/src/layout/Table.js":"20","/mnt/c/Users/Boat/workspace/artisan/m9/a-temp/react-app/src/contexts/TempValueContext.js":"21","/mnt/c/Users/Boat/workspace/artisan/m9/a-temp/react-app/src/services/Connection.js":"22"},{"size":346,"mtime":1607326981489,"results":"23","hashOfConfig":"24"},{"size":160,"mtime":1607486865757,"results":"25","hashOfConfig":"24"},{"size":1247,"mtime":1607768111430,"results":"26","hashOfConfig":"24"},{"size":681,"mtime":1607772169289,"results":"27","hashOfConfig":"24"},{"size":543,"mtime":1607766715109,"results":"28","hashOfConfig":"24"},{"size":564,"mtime":1607309194393,"results":"29","hashOfConfig":"24"},{"size":505,"mtime":1607324463734,"results":"30","hashOfConfig":"24"},{"size":3866,"mtime":1607774518021,"results":"31","hashOfConfig":"24"},{"size":788,"mtime":1607774518005,"results":"32","hashOfConfig":"24"},{"size":36,"mtime":1607317004471,"results":"33","hashOfConfig":"24"},{"size":123,"mtime":1607501529215,"results":"34","hashOfConfig":"24"},{"size":846,"mtime":1607668485991,"results":"35","hashOfConfig":"24"},{"size":1778,"mtime":1607662662743,"results":"36","hashOfConfig":"24"},{"size":1882,"mtime":1607848333447,"results":"37","hashOfConfig":"24"},{"size":3906,"mtime":1607848279781,"results":"38","hashOfConfig":"24"},{"size":970,"mtime":1607848096846,"results":"39","hashOfConfig":"24"},{"size":518,"mtime":1607848279773,"results":"40","hashOfConfig":"24"},{"size":469,"mtime":1607324463795,"results":"41","hashOfConfig":"24"},{"size":2154,"mtime":1607668485950,"results":"42","hashOfConfig":"24"},{"size":1614,"mtime":1607662662765,"results":"43","hashOfConfig":"24"},{"size":592,"mtime":1607773440326,"results":"44","hashOfConfig":"24"},{"size":1667,"mtime":1607774220088,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"1ioqpka",{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"48"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"48"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"48"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"48"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"48"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"48"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"48"},"/mnt/c/Users/Boat/workspace/artisan/m9/a-temp/react-app/src/index.js",[],["100","101"],"/mnt/c/Users/Boat/workspace/artisan/m9/a-temp/react-app/src/redux/store.js",[],"/mnt/c/Users/Boat/workspace/artisan/m9/a-temp/react-app/src/App.js",[],"/mnt/c/Users/Boat/workspace/artisan/m9/a-temp/react-app/src/redux/reducers/Temporature.js",["102"],"\nimport {CURRENTLY} from '../constants/Temporature'\n\nconst initialState = {\n    currentTemporature : 0,       \n    maxTemporature : {\n        id: \"\",\n        temporature : 0 ,\n        location : \"none\" \n    },  \n    minTemporature : {\n        id: \"\",\n        temporature : 0 ,\n        location : \"none\" \n    },\n    avgTemporature : {\n        id: \"\",\n        temporature : 0 ,\n        location : \"none\" \n    },\n    temporatures : [ ] /// id,temporature,location \n}\n\nexport default (state = initialState, action, temp) => {\n    switch (action.type) {\n        case CURRENTLY :\n            return {...state , currentTemporature: temp}\n        default :\n            return state\n    }\n}","/mnt/c/Users/Boat/workspace/artisan/m9/a-temp/react-app/src/pages/Home.js",["103"],"import React from 'react'\nimport styled from 'styled-components'\nimport List from '../components/List'\nimport Graph from '../components/Graph'\nimport Ranking from '../components/Ranking'\nimport Banner from '../assets/banner.png'\n\nconst Title = styled.div`\n    padding-top: 5vh;\n    img{\n        width: 100%;\n    }\n`\n\nconst Home = () => {\n    return (\n        <>\n            <Title>\n            <img src={Banner} />\n            </Title>\n            <List />\n            <Graph />\n            <Ranking />\n        </>\n    )\n}\n\nexport default Home","/mnt/c/Users/Boat/workspace/artisan/m9/a-temp/react-app/src/components/Footer.js",[],"/mnt/c/Users/Boat/workspace/artisan/m9/a-temp/react-app/src/components/GlobalStyle.js",[],"/mnt/c/Users/Boat/workspace/artisan/m9/a-temp/react-app/src/pages/Charts.js",["104"],"import { Index, TimeSeries } from 'pondjs'\nimport React from 'react'\nimport { ChartContainer, ChartRow, Charts, LineChart, styler, YAxis } from 'react-timeseries-charts'\nimport data2 from '../services/Data'\n\nclass SimpleChart extends React.Component {\n  constructor(props) {\n    super(props)\n    console.log(data2)\n    let x = data2.values.map(([d, value]) => [Index.getIndexString('1h', new Date(d)), value])\n    console.log(x)\n    const series = {\n      name: 'weather',\n      columns: ['time', 'temp'],\n      points: [\n        [1607666430, 25.544],\n        [1607666445, 25.5425],\n        [1607666460, 25.553888888888892],\n        [1607666475, 25.55666666666667],\n        [1607666490, 25.547999999999995],\n        [1607666505, 25.512666666666664],\n        [1607666520, 25.489333333333327],\n        [1607666535, 25.449999999999992],\n        [1607666550, 25.468000000000007],\n        [1607666565, 25.473333333333326],\n        [1607666580, 25.46733333333334],\n        [1607666595, 25.478666666666665],\n        [1607666610, 25.471333333333337],\n        [1607666625, 25.48533333333334],\n        [1607666640, 25.50466666666666],\n        [1607666655, 25.519999999999996],\n      ],\n    }\n    this.state = {\n      series: new TimeSeries(series),\n    }\n  }\n  componentDidMount() {\n    fetch(\n      'http://localhost:4000/query?db=dii&q=SELECT%20mean(%22d_temperature%22)%20FROM%20%22v1%22%20WHERE%20(%22topic%22%20%3D%20%27dii%2FArm-001%2Fstatus%27)%20AND%20time%20%3E%3D%20now()%20-%203h%20GROUP%20BY%20time(15s)%20fill(null)%3BSELECT%20mean(%22d_temperature%22)%20FROM%20%22v1%22%20WHERE%20(%22topic%22%20%3D%20%27dii%2FBoat-001%2Fstatus%27)%20AND%20time%20%3E%3D%20now()%20-%2010h%20GROUP%20BY%20time(15s)%20fill(null)&epoch=ms'\n    )\n      .then((res) => res.json())\n      .then((json) => {\n        const d = {\n          data: json.results[1].series[0].values,\n        }\n        console.log(d)\n        const series = {\n          name: 'weather',\n          columns: ['time', 'temp'],\n          points: d.data,\n        }\n        this.setState({\n          data: d.data,\n          series: new TimeSeries(series),\n        })\n      })\n  }\n  render() {\n    console.log(this.state.series)\n    let series1 = this.state.series\n    let tempSeries = this.state.series\n    let series = series1\n    window.series = series1\n\n    const style = styler([\n      {\n        key: 'precip',\n        color: '#A5C8E1',\n        selected: '#2CB1CF',\n      },\n      {\n        key: 'temp',\n        color: '#A5C8E1',\n        selected: '#2CB1CF',\n      },\n    ])\n\n    return (\n      <ChartContainer\n        utc={this.state.mode === 'utc'}\n        timeRange={tempSeries.timerange()}\n        showGrid={true}\n        showGridPosition=\"over\"\n        trackerPosition={this.state.tracker}\n        trackerTimeFormat=\"%X\"\n        onTrackerChanged={(tracker) => this.setState({ tracker })}\n      >\n        <ChartRow height=\"150\">\n          <YAxis\n            id=\"temp\"\n            label=\"Temperature (°C)\"\n            // labelOffset={-5}\n            style={style.axisStyle('temp')}\n            min={tempSeries.min('temp')}\n            max={tempSeries.max('temp')}\n            width=\"80\"\n            type=\"linear\"\n            format=\",.1f\"\n          />\n          <Charts>\n            <LineChart axis=\"temp\" series={tempSeries} columns={['temp']} style={style} />\n            {/* <LineChart\n              axis=\"pressure\"\n              series={pressureSeries}\n              columns={['pressure']}\n              style={style}\n            /> */}\n          </Charts>\n        </ChartRow>\n      </ChartContainer>\n    )\n  }\n}\n\nexport default SimpleChart\n\n// class App extends React.Component {\n//   state = {};\n\n//   render() {\n//     return (\n//       <div className=\"p-3 m-4 border border-muted\">\n//         <SimpleChart />\n//       </div>\n//     );\n//   }\n// }\n\n// render(<App />, document.getElementById(\"root\"));\n","/mnt/c/Users/Boat/workspace/artisan/m9/a-temp/react-app/src/components/Navbar/index.js",[],"/mnt/c/Users/Boat/workspace/artisan/m9/a-temp/react-app/src/redux/constants/Temporature.js",[],"/mnt/c/Users/Boat/workspace/artisan/m9/a-temp/react-app/src/redux/actions/Temporature.js",[],["105","106"],"/mnt/c/Users/Boat/workspace/artisan/m9/a-temp/react-app/src/services/Data.js",["107"],"export default {\n    values: [\n      [\"2017-01-24T00:00\", 0.01],\n      [\"2017-01-24T01:00\", 0.13],\n      [\"2017-01-24T02:00\", 0.07],\n      [\"2017-01-24T03:00\", 0.04],\n      [\"2017-01-24T04:00\", 0.33],\n      [\"2017-01-24T05:00\", 0],\n      [\"2017-01-24T06:00\", 0],\n      [\"2017-01-24T07:00\", 0],\n      [\"2017-01-24T08:00\", 0.95],\n      [\"2017-01-24T09:00\", 1.12],\n      [\"2017-01-24T10:00\", 0.66],\n      [\"2017-01-24T11:00\", 0.06],\n      [\"2017-01-24T12:00\", 0.3],\n      [\"2017-01-24T13:00\", 0.05],\n      [\"2017-01-24T14:00\", 0.5],\n      [\"2017-01-24T15:00\", 0.24],\n      [\"2017-01-24T16:00\", 0.02],\n      [\"2017-01-24T17:00\", 0.98],\n      [\"2017-01-24T18:00\", 0.46],\n      [\"2017-01-24T19:00\", 0.8],\n      [\"2017-01-24T20:00\", 0.39],\n      [\"2017-01-24T21:00\", 0.4],\n      [\"2017-01-24T22:00\", 0.39],\n      [\"2017-01-24T23:00\", 0.28]\n    ]\n  };\n  ","/mnt/c/Users/Boat/workspace/artisan/m9/a-temp/react-app/src/components/Navbar/NavBarElements.js",[],"/mnt/c/Users/Boat/workspace/artisan/m9/a-temp/react-app/src/components/List/index.js",[],"/mnt/c/Users/Boat/workspace/artisan/m9/a-temp/react-app/src/components/Graph/index.js",["108"],"import { Index, TimeSeries } from 'pondjs'\nimport React from 'react'\nimport { ChartContainer, ChartRow, Charts, LineChart, styler, YAxis } from 'react-timeseries-charts'\nimport data2 from '../../services/Data'\nimport { GraphComponents, GraphDetails } from './GraphElements'\n\nclass Graph extends React.Component {\n  constructor(props) {\n    super(props)\n    console.log(data2)\n    let x = data2.values.map(([d, value]) => [Index.getIndexString('1h', new Date(d)), value])\n    console.log(x)\n    const series = {\n      name: 'weather',\n      columns: ['time', 'temp'],\n      points: [\n        [1607666430, 25.544],\n        [1607666445, 25.5425],\n        [1607666460, 25.553888888888892],\n        [1607666475, 25.55666666666667],\n        [1607666490, 25.547999999999995],\n        [1607666505, 25.512666666666664],\n        [1607666520, 25.489333333333327],\n        [1607666535, 25.449999999999992],\n        [1607666550, 25.468000000000007],\n        [1607666565, 25.473333333333326],\n        [1607666580, 25.46733333333334],\n        [1607666595, 25.478666666666665],\n        [1607666610, 25.471333333333337],\n        [1607666625, 25.48533333333334],\n        [1607666640, 25.50466666666666],\n        [1607666655, 25.519999999999996],\n      ],\n    }\n    this.state = {\n      series: new TimeSeries(series),\n    }\n  }\n\n  componentDidMount() {\n    fetch(\n      'http://localhost:4000/query?db=dii&q=SELECT%20mean(%22d_temperature%22)%20FROM%20%22v1%22%20WHERE%20(%22topic%22%20%3D%20%27dii%2FArm-001%2Fstatus%27)%20AND%20time%20%3E%3D%20now()%20-%203h%20GROUP%20BY%20time(15s)%20fill(null)%3BSELECT%20mean(%22d_temperature%22)%20FROM%20%22v1%22%20WHERE%20(%22topic%22%20%3D%20%27dii%2FBoat-001%2Fstatus%27)%20AND%20time%20%3E%3D%20now()%20-%2010h%20GROUP%20BY%20time(15s)%20fill(null)&epoch=ms'\n    )\n      .then((res) => res.json())\n      .then((json) => {\n        const d = {\n          data: json.results[1].series[0].values,\n        }\n        console.log(d)\n        const series = {\n          name: 'weather',\n          columns: ['time', 'temp'],\n          points: d.data,\n        }\n        this.setState({\n          data: d.data,\n          series: new TimeSeries(series),\n        })\n      })\n  }\n\n  render() {\n    console.log(this.state.series)\n    let series1 = this.state.series\n    let tempSeries = this.state.series\n    let series = series1\n    window.series = series1\n\n    const style = styler([\n      {\n        key: 'precip',\n        color: '#A5C8E1',\n        selected: '#2CB1CF',\n      },\n      {\n        key: 'temp',\n        color: '#A5C8E1',\n        selected: '#2CB1CF',\n      },\n    ])\n\n    return (\n      <GraphComponents>\n        <h1>GRAPH</h1>\n        <GraphDetails>\n          <ChartContainer\n            utc={this.state.mode === 'utc'}\n            timeRange={tempSeries.timerange()}\n            showGrid={true}\n            showGridPosition=\"over\"\n            trackerPosition={this.state.tracker}\n            trackerTimeFormat=\"%X\"\n            onTrackerChanged={(tracker) => this.setState({ tracker })}\n          >\n            <ChartRow height=\"350\">\n              <YAxis\n                id=\"temp\"\n                label=\"Temperature (°C)\"\n                // labelOffset={-5}\n                style={style.axisStyle('temp')}\n                min={tempSeries.min('temp')}\n                max={tempSeries.max('temp')}\n                width=\"50\"\n                type=\"linear\"\n                format=\",.1f\"\n              />\n              <Charts>\n                <LineChart axis=\"temp\" series={tempSeries} columns={['temp']} style={style} />\n                {/* <LineChart\n                  axis=\"pressure\"\n                  series={pressureSeries}\n                  columns={['pressure']}\n                  style={style}\n                /> */}\n              </Charts>\n            </ChartRow>\n          </ChartContainer>\n        </GraphDetails>\n      </GraphComponents>\n    )\n  }\n}\n\nexport default Graph\n","/mnt/c/Users/Boat/workspace/artisan/m9/a-temp/react-app/src/components/Ranking/index.js",["109","110","111"],"import React, { useContext } from 'react'\nimport { TempValueContextWrapper } from '../../contexts/TempValueContext'\nimport TableCard from '../../layout/Table'\nimport { RankingComponents, RankingDetails } from './RankingElements'\n\nconst Ranking = () => {\n  const {temp1,temp2,maxTemp,minTemp,tempAvg}= useContext(TempValueContextWrapper)\n  return (\n    <RankingComponents>\n      <h1>RANKING</h1>\n      <RankingDetails>\n        <TableCard No=\"NO.\" Location=\"Location\" Temperature=\"Temperature\"></TableCard>\n\n        {temp1 > temp2 ?\n          <>\n            <TableCard No=\"1\" Location=\"Artisan\" Temperature={temp1}/>\n            <TableCard No=\"2\" Location=\"My Home\" Temperature={temp2}/>\n          </>\n          :\n          <>\n            <TableCard No=\"1\" Location=\"My Home\" Temperature={temp2}/>\n            <TableCard No=\"2\" Location=\"Artisan\" Temperature={temp1}/>\n          </>\n        }\n      </RankingDetails>\n    </RankingComponents>\n  )\n}\n\nexport default Ranking\n","/mnt/c/Users/Boat/workspace/artisan/m9/a-temp/react-app/src/components/Graph/GraphElements.js",[],"/mnt/c/Users/Boat/workspace/artisan/m9/a-temp/react-app/src/components/Ranking/RankingElements.js",[],"/mnt/c/Users/Boat/workspace/artisan/m9/a-temp/react-app/src/components/List/ListElements.js",[],"/mnt/c/Users/Boat/workspace/artisan/m9/a-temp/react-app/src/layout/Table.js",[],["112","113"],"/mnt/c/Users/Boat/workspace/artisan/m9/a-temp/react-app/src/contexts/TempValueContext.js",[],"/mnt/c/Users/Boat/workspace/artisan/m9/a-temp/react-app/src/services/Connection.js",["114"],"import React, {useContext} from 'react'\nimport {TempValueContextWrapper} from '../contexts/TempValueContext'\n\nlet note\n\nconst mqtt    = require('mqtt')\nconst options = {\n    protocol: 'mqtts',\n    clientId: 'b0908853' + Math.random()   \n}\nconst client  = mqtt.connect('mqtt://mqtt.artisandigital.tech:8883', options)\nclient.subscribe('dii/+/status')\n\nconst Connection = () => {\n\n    const {temp1,setTemp1,temp2,setTemp2,maxTemp,setMaxTemp,minTemp,setMinTemp,tempAvg, setTempAvg}= useContext(TempValueContextWrapper)\n\n    client.on('connect', function () {\n        console.log(\"connect\")\n    })\n    client.on('message',async function (topic, message) { \n        note = message.toString()\n        note = JSON.parse(note)\n        if ( note.d.myName ===  \"Boat-001\") {\n            setTemp1(note.d.temperature)    \n        }     \n        if ( note.d.myName ===  \"Arm-001\") {\n            setTemp2(note.d.temperature) \n        }      \n    })\n\n    if (temp1 < minTemp && temp1 !== null) {\n        setMinTemp(temp1)\n        if (temp2 < minTemp && temp1 !== null) {\n          setMinTemp(temp2)\n        }\n    }\n    if (temp2 < minTemp && temp1 !== null) {\n        setMinTemp(temp2)\n        if (temp1 < minTemp && temp1 !== null ) {\n          setMinTemp(temp1)\n        }\n    }\n\n    if (temp1 > maxTemp) {\n        setMaxTemp(temp1)\n        if (temp2 > maxTemp) {\n          setMaxTemp(temp2)\n        }\n      }\n    if (temp2 > maxTemp) {\n        setMaxTemp(temp2)\n        if (temp1 > maxTemp) {\n          setMaxTemp(temp1)\n        }\n    }\n\n    setTempAvg(Math.round((temp1+temp2)/2))\n\n    console.log(minTemp)\n\n    return (\n        <>\n        </>\n    )\n}\n\nexport default Connection\n",{"ruleId":"115","replacedBy":"116"},{"ruleId":"117","replacedBy":"118"},{"ruleId":"119","severity":1,"message":"120","line":24,"column":1,"nodeType":"121","endLine":31,"endColumn":2},{"ruleId":"122","severity":1,"message":"123","line":19,"column":13,"nodeType":"124","endLine":19,"endColumn":33},{"ruleId":"125","severity":1,"message":"126","line":63,"column":9,"nodeType":"127","messageId":"128","endLine":63,"endColumn":15},{"ruleId":"115","replacedBy":"129"},{"ruleId":"117","replacedBy":"130"},{"ruleId":"119","severity":1,"message":"131","line":1,"column":1,"nodeType":"121","endLine":28,"endColumn":5},{"ruleId":"125","severity":1,"message":"126","line":66,"column":9,"nodeType":"127","messageId":"128","endLine":66,"endColumn":15},{"ruleId":"125","severity":1,"message":"132","line":7,"column":22,"nodeType":"127","messageId":"128","endLine":7,"endColumn":29},{"ruleId":"125","severity":1,"message":"133","line":7,"column":30,"nodeType":"127","messageId":"128","endLine":7,"endColumn":37},{"ruleId":"125","severity":1,"message":"134","line":7,"column":38,"nodeType":"127","messageId":"128","endLine":7,"endColumn":45},{"ruleId":"115","replacedBy":"135"},{"ruleId":"117","replacedBy":"136"},{"ruleId":"125","severity":1,"message":"134","line":16,"column":80,"nodeType":"127","messageId":"128","endLine":16,"endColumn":87},"no-native-reassign",["137"],"no-negated-in-lhs",["138"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-unused-vars","'series' is assigned a value but never used.","Identifier","unusedVar",["137"],["138"],"Assign object to a variable before exporting as module default","'maxTemp' is assigned a value but never used.","'minTemp' is assigned a value but never used.","'tempAvg' is assigned a value but never used.",["137"],["138"],"no-global-assign","no-unsafe-negation"]